# Basic Social Media App with React

Here's a succinct implementation of a basic social media app with local post and messaging functionality using React and localStorage for data persistence.

## Project Structure

```
src/
  components/
    Feed.js
    Post.js
    NewPost.js
    Messages.js
    Conversation.js
    NewMessage.js
    Navbar.js
  contexts/
    DataContext.js
  App.js
  index.js
```

## Implementation

### 1. First, let's create the data context to manage our local storage data

```jsx
// DataContext.js
import React, { createContext, useState, useEffect } from 'react';

export const DataContext = createContext();

export const DataProvider = ({ children }) => {
  // Initialize state from localStorage or with empty arrays
  const [posts, setPosts] = useState(() => {
    const savedPosts = localStorage.getItem('posts');
    return savedPosts ? JSON.parse(savedPosts) : [];
  });
  
  const [messages, setMessages] = useState(() => {
    const savedMessages = localStorage.getItem('messages');
    return savedMessages ? JSON.parse(savedMessages) : [];
  });
  
  const [currentUser] = useState({ id: '1', username: 'user' });

  // Save to localStorage whenever data changes
  useEffect(() => {
    localStorage.setItem('posts', JSON.stringify(posts));
  }, [posts]);
  
  useEffect(() => {
    localStorage.setItem('messages', JSON.stringify(messages));
  }, [messages]);
  
  // Post functions
  const addPost = (content) => {
    const newPost = {
      id: Date.now().toString(),
      userId: currentUser.id,
      username: currentUser.username,
      content,
      timestamp: new Date().toISOString(),
      likes: 0
    };
    setPosts(prev => [newPost, ...prev]);
  };
  
  const likePost = (postId) => {
    setPosts(prev => prev.map(post => 
      post.id === postId ? { ...post, likes: post.likes + 1 } : post
    ));
  };
  
  // Message functions
  const sendMessage = (recipientId, content) => {
    const newMessage = {
      id: Date.now().toString(),
      senderId: currentUser.id,
      recipientId,
      content,
      timestamp: new Date().toISOString(),
      read: false
    };
    setMessages(prev => [...prev, newMessage]);
  };
  
  const markAsRead = (messageId) => {
    setMessages(prev => prev.map(message => 
      message.id === messageId ? { ...message, read: true } : message
    ));
  };
  
  return (
    <DataContext.Provider value={{ 
      currentUser,
      posts,
      messages,
      addPost,
      likePost,
      sendMessage,
      markAsRead
    }}>
      {children}
    </DataContext.Provider>
  );
};
```

### 2. Next, let's create our components

```jsx
// Navbar.js
import React from 'react';

const Navbar = ({ setActiveTab }) => {
  return (
    <nav style={{ display: 'flex', justifyContent: 'space-between', padding: '1rem', background: '#4267B2', color: 'white' }}>
      <div style={{ fontWeight: 'bold', fontSize: '1.5rem' }}>SocialApp</div>
      <div>
        <button onClick={() => setActiveTab('feed')} style={{ marginRight: '1rem', background: 'none', border: 'none', color: 'white', cursor: 'pointer' }}>Feed</button>
        <button onClick={() => setActiveTab('messages')} style={{ background: 'none', border: 'none', color: 'white', cursor: 'pointer' }}>Messages</button>
      </div>
    </nav>
  );
};

export default Navbar;
```

```jsx
// NewPost.js
import React, { useState, useContext } from 'react';
import { DataContext } from '../contexts/DataContext';

const NewPost = () => {
  const [content, setContent] = useState('');
  const { addPost } = useContext(DataContext);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (content.trim()) {
      addPost(content);
      setContent('');
    }
  };

  return (
    <div style={{ marginBottom: '1rem', padding: '1rem', background: 'white', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>
      <form onSubmit={handleSubmit}>
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          placeholder="What's on your mind?"
          style={{ width: '100%', padding: '0.5rem', marginBottom: '0.5rem', borderRadius: '4px', border: '1px solid #ddd' }}
          rows="3"
        />
        <button 
          type="submit" 
          disabled={!content.trim()} 
          style={{ padding: '0.5rem 1rem', background: '#4267B2', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
        >
          Post
        </button>
      </form>
    </div>
  );
};

export default NewPost;
```

```jsx
// Post.js
import React, { useContext } from 'react';
import { DataContext } from '../contexts/DataContext';

const Post = ({ post }) => {
  const { likePost } = useContext(DataContext);
  const formattedDate = new Date(post.timestamp).toLocaleString();

  return (
    <div style={{ marginBottom: '1rem', padding: '1rem', background: 'white', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>
      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '0.5rem' }}>
        <div style={{ fontWeight: 'bold', marginRight: '0.5rem' }}>{post.username}</div>
        <div style={{ fontSize: '0.8rem', color: '#666' }}>{formattedDate}</div>
      </div>
      <p style={{ margin: '0.5rem 0' }}>{post.content}</p>
      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '0.5rem' }}>
        <button 
          onClick={() => likePost(post.id)} 
          style={{ background: 'none', border: 'none', color: '#4267B2', cursor: 'pointer' }}
        >
          Like ({post.likes})
        </button>
      </div>
    </div>
  );
};

export default Post;
```

```jsx
// Feed.js
import React, { useContext } from 'react';
import { DataContext } from '../contexts/DataContext';
import NewPost from './NewPost';
import Post from './Post';

const Feed = () => {
  const { posts } = useContext(DataContext);

  return (
    <div style={{ maxWidth: '600px', margin: '0 auto', padding: '1rem' }}>
      <NewPost />
      <div>
        {posts.length > 0 ? (
          posts.map(post => <Post key={post.id} post={post} />)
        ) : (
          <div style={{ textAlign: 'center', padding: '2rem', color: '#666' }}>
            No posts yet. Be the first to post!
          </div>
        )}
      </div>
    </div>
  );
};

export default Feed;
```

```jsx
// Messages.js
import React, { useContext, useState } from 'react';
import { DataContext } from '../contexts/DataContext';
import Conversation from './Conversation';
import NewMessage from './NewMessage';

const Messages = () => {
  const { messages, currentUser } = useContext(DataContext);
  const [selectedUserId, setSelectedUserId] = useState(null);

  // Get unique users from messages
  const getUniqueUsers = () => {
    const users = new Set();
    messages.forEach(msg => {
      if (msg.senderId !== currentUser.id) users.add(msg.senderId);
      if (msg.recipientId !== currentUser.id) users.add(msg.recipientId);
    });
    return Array.from(users);
  };

  const uniqueUsers = getUniqueUsers();

  return (
    <div style={{ maxWidth: '800px', margin: '0 auto', padding: '1rem' }}>
      <div style={{ display: 'flex', height: '70vh' }}>
        <div style={{ width: '30%', borderRight: '1px solid #ddd', padding: '1rem' }}>
          <h3>Conversations</h3>
          {uniqueUsers.length > 0 ? (
            uniqueUsers.map(userId => (
              <div 
                key={userId}
                onClick={() => setSelectedUserId(userId)}
                style={{ 
                  padding: '0.5rem', 
                  cursor: 'pointer',
                  background: selectedUserId === userId ? '#f0f2f5' : 'transparent'
                }}
              >
                User {userId}
              </div>
            ))
          ) : (
            <div>No conversations yet</div>
          )}
          <div style={{ marginTop: '1rem' }}>
            <input 
              type="text" 
              placeholder="Start new conversation (user ID)"
              onKeyPress={(e) => {
                if (e.key === 'Enter' && e.target.value) {
                  setSelectedUserId(e.target.value);
                  e.target.value = '';
                }
              }}
              style={{ width: '100%', padding: '0.5rem', borderRadius: '4px', border: '1px solid #ddd' }}
            />
          </div>
        </div>
        <div style={{ width: '70%', padding: '1rem' }}>
          {selectedUserId ? (
            <>
              <Conversation userId={selectedUserId} />
              <NewMessage recipientId={selectedUserId} />
            </>
          ) : (
            <div style={{ textAlign: 'center', padding: '2rem', color: '#666' }}>
              Select a conversation or start a new one
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Messages;
```

```jsx
// Conversation.js
import React, { useContext, useEffect } from 'react';
import { DataContext } from '../contexts/DataContext';

const Conversation = ({ userId }) => {
  const { messages, currentUser, markAsRead } = useContext(DataContext);

  // Filter messages for the conversation with this user
  const conversationMessages = messages.filter(msg => 
    (msg.senderId === currentUser.id && msg.recipientId === userId) ||
    (msg.recipientId === currentUser.id && msg.senderId === userId)
  ).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

  // Mark unread messages as read
  useEffect(() => {
    conversationMessages.forEach(msg => {
      if (msg.recipientId === currentUser.id && !msg.read) {
        markAsRead(msg.id);
      }
    });
  }, [conversationMessages, currentUser.id, markAsRead]);

  return (
    <div style={{ height: '60vh', overflowY: 'scroll', marginBottom: '1rem' }}>
      <h3>Conversation with User {userId}</h3>
      {conversationMessages.length > 0 ? (
        <div>
          {conversationMessages.map(msg => (
            <div 
              key={msg.id}
              style={{ 
                maxWidth: '70%',
                padding: '0.5rem 1rem',
                margin: '0.5rem 0',
                borderRadius: '18px',
                background: msg.senderId === currentUser.id ? '#0084ff' : '#f1f0f0',
                color: msg.senderId === currentUser.id ? 'white' : 'black',
                alignSelf: msg.senderId === currentUser.id ? 'flex-end' : 'flex-start',
                marginLeft: msg.senderId === currentUser.id ? 'auto' : '0'
              }}
            >
              <div>{msg.content}</div>
              <div style={{ fontSize: '0.7rem', opacity: 0.7, textAlign: 'right' }}>
                {new Date(msg.timestamp).toLocaleTimeString()}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div style={{ textAlign: 'center', padding: '2rem', color: '#666' }}>
          No messages yet. Start the conversation!
        </div>
      )}
    </div>
  );
};

export default Conversation;
```

```jsx
// NewMessage.js
import React, { useState, useContext } from 'react';
import { DataContext } from '../contexts/DataContext';

const NewMessage = ({ recipientId }) => {
  const [message, setMessage] = useState('');
  const { sendMessage } = useContext(DataContext);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (message.trim()) {
      sendMessage(recipientId, message);
      setMessage('');
    }
  };

  return (
    <form onSubmit={handleSubmit} style={{ display: 'flex' }}>
      <input
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        placeholder="Type a message..."
        style={{ 
          flex: 1, 
          padding: '0.5rem', 
          borderRadius: '20px', 
          border: '1px solid #ddd',
          marginRight: '0.5rem'
        }}
      />
      <button 
        type="submit" 
        disabled={!message.trim()} 
        style={{ 
          padding: '0.5rem 1rem', 
          background: '#4267B2', 
          color: 'white', 
          border: 'none', 
          borderRadius: '20px', 
          cursor: 'pointer' 
        }}
      >
        Send
      </button>
    </form>
  );
};

export default NewMessage;
```

### 3. Finally, let's create the App component

```jsx
// App.js
import React, { useState } from 'react';
import { DataProvider } from './contexts/DataContext';
import Navbar from './components/Navbar';
import Feed from './components/Feed';
import Messages from './components/Messages';

function App() {
  const [activeTab, setActiveTab] = useState('feed');

  return (
    <DataProvider>
      <div style={{ fontFamily: 'Arial, sans-serif', background: '#f0f2f5', minHeight: '100vh' }}>
        <Navbar setActiveTab={setActiveTab} />
        <main>
          {activeTab === 'feed' ? <Feed /> : <Messages />}
        </main>
      </div>
    </DataProvider>
  );
}

export default App;
```

### 4. Index file

```jsx
// index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
```

## How to use this app:

1. **Feed tab**: Create, view and like posts
2. **Messages tab**: Send and receive messages
   - Enter a user ID to start a new conversation
   - Select existing conversations from the sidebar
   - All messages are stored locally in the browser

This implementation provides a basic social media app with:
- Feed of posts with like functionality
- Direct messaging system
- All data stored locally in the browser using localStorage
- Simple UI with navigation between features

You can expand this by adding features like comments, user profiles, or more sophisticated data management.
